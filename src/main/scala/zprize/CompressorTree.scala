package org.datenlord
package zprize

import spinal.core._
import spinal.core.sim._
import spinal.lib._
import spinal.lib.fsm._

import scala.language.postfixOps

case class OperandInfo(width: Int, weight: Int, positive: Boolean, time: Int) {
  def evaluate(data: BigInt): BigInt = {
    require(data.bitLength <= width)
    (data << weight) * (if (positive) 1 else -1)
  }

  def maxValue: BigInt = if (positive) ((BigInt(1) << width) - 1) << weight else BigInt(0)

  def <<(shiftLeft: Int) = OperandInfo(width, weight + shiftLeft, positive, time)

  def unary_- = OperandInfo(width, weight, !positive, time)
}

case class CompressorTree(operandInfos: Seq[OperandInfo])
  extends ChainsawGenerator {

  override def name = s"Compressor_${operandInfos.hashCode()}".replace('-', 'N')

  override val impl = (dataIn: Seq[Any]) => {
    val ret = dataIn.asInstanceOf[Seq[BigInt]].zip(operandInfos)
      .map { case (operand, info) => info.evaluate(operand) }.sum
    Seq(ret)
  }

  // TODO: the output width should be generated by the bit heap
  override var inputTypes = operandInfos.map(_.width).map(UIntInfo(_))
  val outWidth = operandInfos.map(_.maxValue).sum.bitLength
  override var outputTypes = Seq.fill(2)(UIntInfo(outWidth)) // FIXME:

  override var inputFormat = inputNoControl
  override var outputFormat = outputNoControl

  override val inputTimes = Some(operandInfos.map(_.time))
  override var latency = actualInTimes.max + 1

  //  utilEstimation = ???
  fmaxEstimation = 600 MHz

  override def implH = new ChainsawModule(this) {
    uintDataOut := uintDataIn
  }

  override def implNaiveH: Option[ChainsawModule] = Option(new ChainsawModule(this) {
    val alignedWeightedInput = uintDataIn.zip(operandInfos).map {
      case (bits, info) => bits.d(latency - 1 - info.time) << info.weight
    }

    val positive = alignedWeightedInput.zip(operandInfos).filter(_._2.positive).map(_._1).reduce(_ +^ _)
    val negativeOperands = alignedWeightedInput.zip(operandInfos).filterNot(_._2.positive).map(_._1)
    val ret = if (negativeOperands.nonEmpty) positive - negativeOperands.reduce(_ +^ _) else positive
    uintDataOut.head := ret.resize(outWidth).d(1)
    uintDataOut.last := U(0, outWidth bits)
  })
}
